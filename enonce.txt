Final Round

Pour ce dernier exercice vous devrez faire une plateforme de location d’appartement (pour une durée temporaire).
INTRO : Les utilisateurs non inscrit pourront surfer sur des annonces d’offre de locations d’appartement pour une
 durée déterminée. Ils pourront également louer l’appartement si il est dispo. En cliquant sur ces annonces nous
  pourrons voir le détail de celles-ci avec 3 photos. Avec un titre, une description, le nom de l’utilisateur qui l’a créé.
1) Commencez par tous créer un dossier loueMonAppart et un repo sur github.com pour que je puisse faire mes revues
 avec Pierre (je ferai la première), appelez-le loueMonAppart. Essayez de garder le tout sur la branche principal master,
  vous pouvez évidemment faire des tests dans d’autres branches.
2) Pour cet exercice vous allez utiliser notre schéma MVC (model view controller) en prenant comme contrôleur le framework
 Flight (ET NON NOTRE ANCIEN INDEX AVEC LE SWITCH).
3) Vous allez utiliser comme backend le schema des entités (classes) représentant les tableaux en base de données avec le
 BddManager pour gérer les intéractions avec la base de données. Si vous vous sentez à l’aise rajoutez les repository qu’on
  a vu en cours. Attention n’oubliez pas notre hydrateur d’informations pour les entités. Stockez le tout dans le dossier model
   (comme d’hab) Il sera notre librairie.
4) Les fonctions qui n’ont pas d’intéractions avec la base de données. Irons dans le même dossier. Faites des objets.
 Les fonctions toutes simples c’est fini !! même pour les gets.
4) Pour le css essayez de démarrer vite cette fois et adoptez un framework que vous connaissez ou bootstrap ou alors
 chercher un peu sur le net vous devriez trouver assez vite il y en a quelques uns.
5) Donc pour ce projet comptez au moins les tables en base de données : User, Annonce, Photo, Categorie, Location
 (équivalent de commande), commentaires, messages et favoris. J’aurai pu vous lister les attributs dès le départ mais
  ça sera un bon exercice pour vous d’essayer de comprendre ce que vous faites et pourquoi. Je pense que vous allez
   oublier des attributs (ce qui arrive souvent en production) donc il convient de les rajouter par la suite.
    Attention donc pensez à générer les getters et les setters (ET NE PAS LES TAPPER À LA MAIN) et donc à chaque
     fois que vous rajoutez un attribut il faut REGENEREZ tous les getters et setters au cas ou !!
Je vous conseille de commencer à programmer de façon incrémentale. Ne créez pas toutes les tables SQL dès le départ créez les au fûr
 et à mesure que vous en avez besoin. Si vous voyez dès le départ ce que vous allez faire vous pouvez par contre.
6) Le site comportera des sections que vous pourrez accéder en étant offline et des parties qu’on ne pourra accéder qu’en étant online.
 Et finalement une partie ou seul les administrateurs pourront accéder pour valider les annonces.
7) Si vous êtes en avance faites un système de messagerie (comme un forum à deux, et donc pas de chat ajax ou node, que des méthodes posts simples).
8) (Pour ceux qui sont motivés) Utilisez les tests unitaires pour tester les objets que vous désirez tester.
9) En fin de journée faites toujours une sauvegarde de la base de données (si applicable) et un (git add –all) suivi d’un
 (git commit –m « commit fin de journée »), et ensuite un (git push origin master). Attention je vous encourage toujours à faire
  un git commit –m « dès que vous avez fini une partie importante du site » pour mieux vous repérer et non seulement en fin de journée.
   Si vous n’avez toujours pas compris ça : c’est pour revenir en arrière à un point ou le code marche bien.
10) Si vous êtes perdu appelez à l’aide ! Si je ne viens pas appelez le 15.
/***********************************************************************
*WARNING : pensez conception et méthode et non fonctionnalité. Le but n’est pas de finir le TP (Personne ne pourra) mais de solidifier les fondations de votre façon de programmer qui subsistera quand je ne serai plus là. Il vaut mieux coder deux ou trois bonnes entités que toutes et mal. Car si vous codez mal dès le départ ça sera la cata par la suite. En s’appliquant au départ et en codant correctement le départ vous avez de forte chance de vous en sortir par la suite.
